package strategies

import (
	"bot/events"
	"bot/lib/e"
	"bot/lists"
	"bot/settings"
)

const MsgListToken = "–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º EasyList üëç"

const MsgErrorListToken = "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ üòî "

const MsgAskEasyListId = "–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Ä–≤–∏—Å–µ EasyList"

type ListTokenHandler struct {
	meta            events.TelegramMeta
	settingsService settings.ServiceInterface
	tg              events.Client
	listService     lists.ListService
}

func NewListTokenHandler(meta events.TelegramMeta, settingsService settings.ServiceInterface, tg events.Client, listService lists.ListService) ListTokenHandler {
	return ListTokenHandler{
		meta:            meta,
		settingsService: settingsService,
		tg:              tg,
		listService:     listService,
	}
}

func (h ListTokenHandler) IsSupported(mode int) bool {
	if h.meta.Message.IsCommand() {
		return false
	}
	return mode == AskedEasylistToken
}

func (h ListTokenHandler) Handle(text string, setting *settings.Setting) error {
	setting.EasylistToken = text
	err := h.settingsService.UpdateSetting(setting)
	if err != nil {
		err := h.tg.SendMessage(setting.ChatId, MsgErrorListToken+"while saving setting")
		if err != nil {
			return err
		}
		return e.Wrap("failed to save new settings", err)
	}
	if setting.EasylistId != 0 {
		err = h.settingsService.ChangeMode(setting.Username, Root)
		if err != nil {
			return e.Wrap("failed to change mode to root", err)
		}
		return h.tg.SendMessage(setting.ChatId, MsgListToken)
	}

	err = h.settingsService.ChangeMode(setting.Username, AskedEasylistId)
	if err != nil {
		return e.Wrap("failed to change mode to AskedEasylistId", err)
	}
	return h.tg.SendMessage(setting.ChatId, MsgAskEasyListId)
}
